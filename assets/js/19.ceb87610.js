(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{444:function(_,v,e){_.exports=e.p+"assets/img/http0.9.db1166c6.png"},445:function(_,v,e){_.exports=e.p+"assets/img/http1.0.b52b0d1a.png"},446:function(_,v,e){_.exports=e.p+"assets/img/multiplexing.0c4cb2c7.png"},447:function(_,v,e){_.exports=e.p+"assets/img/http2-protocol-stack.86cdf01a.png"},599:function(_,v,e){"use strict";e.r(v);var t=e(22),c=Object(t.a)({},(function(){var _=this,v=_.$createElement,t=_._self._c||v;return t("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[t("h2",{attrs:{id:"超文本传输协议-http-0-9"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#超文本传输协议-http-0-9"}},[_._v("#")]),_._v(" 超文本传输协议 HTTP/0.9")]),_._v(" "),t("p",[_._v("首先我们来看看诞生最早的 "),t("code",[_._v("HTTP/0.9")]),_._v(" 。")]),_._v(" "),t("p",[t("code",[_._v("HTTP/0.9")]),_._v(" 是于 "),t("code",[_._v("1991")]),_._v(" 年提出的，主要用于学术交流，需求很简单——用来在网络之间传递 "),t("code",[_._v("HTML")]),_._v(" 超文本的内容，所以被称为"),t("strong",[_._v("超文本传输协议")]),_._v("。")]),_._v(" "),t("p",[_._v("下面我们就来看看 "),t("code",[_._v("HTTP/0.9")]),_._v(" 的一个完整的请求流程（可参考下图）。\n"),t("img",{attrs:{src:e(444),alt:"http0.9"}})]),_._v(" "),t("p",[t("code",[_._v("HTTP/0.9")]),_._v(" 的实现有以下三个特点：")]),_._v(" "),t("ul",[t("li",[_._v("只有一个请求行，并没有 "),t("code",[_._v("HTTP")]),_._v(" 请求头和请求体，因为只需要一个请求行就可以完整表达客户端的需求了。")]),_._v(" "),t("li",[_._v("服务器也没有 "),t("code",[_._v("返回头")]),_._v(" 信息，这是因为服务器端并不需要告诉客户端太多信息，只需要返回数据就可以了。")]),_._v(" "),t("li",[_._v("返回的文件内容是以 "),t("code",[_._v("ASCII")]),_._v(" 字符流来传输的，因为都是 "),t("code",[_._v("HTML")]),_._v(" 格式的文件，所以使用 "),t("code",[_._v("ASCII")]),_._v(" 字节码来传输是最合适的。")])]),_._v(" "),t("h2",{attrs:{id:"被浏览器推动的-http-1-0"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#被浏览器推动的-http-1-0"}},[_._v("#")]),_._v(" 被浏览器推动的 HTTP/1.0")]),_._v(" "),t("p",[_._v("万维网的高速发展带来了很多新的需求，而 "),t("code",[_._v("HTTP/0.9")]),_._v(" 已经不能适用新兴网络的发展，所以这时就需要一个新的协议来支撑新兴网络，这就是 "),t("code",[_._v("HTTP/1.0")]),_._v(" 诞生的原因。")]),_._v(" "),t("p",[_._v("不过在详细分析 "),t("code",[_._v("HTTP/1.0")]),_._v(" 之前，我们先来分析下新兴网络都带来了哪些新需求：")]),_._v(" "),t("ul",[t("li",[_._v("首先在浏览器中展示的不单是 "),t("code",[_._v("HTML")]),_._v(" 文件了，还包括了 JavaScript、CSS、图片、音频、视频等不同类型的文件。因此"),t("strong",[_._v("支持多种类型的文件下载")]),_._v("是 "),t("code",[_._v("HTTP/1.0")]),_._v(" 的一个核心诉求。")]),_._v(" "),t("li",[_._v("而且文件格式不仅仅局限于 "),t("code",[_._v("ASCII")]),_._v(" 编码，还有很多其他类型编码的文件。")])]),_._v(" "),t("p",[t("code",[_._v("HTTP/1.0")]),_._v(" 引入了 "),t("code",[_._v("请求头")]),_._v(" 和 "),t("code",[_._v("响应头")]),_._v(" ，它们都是以为 "),t("code",[_._v("Key-Value")]),_._v(" 形式保存的，在 "),t("code",[_._v("HTTP")]),_._v(" 发送请求时，会带上请求头信息，服务器返回数据时，会先返回响应头信息。")]),_._v(" "),t("p",[_._v("至于 "),t("code",[_._v("HTTP/1.0")]),_._v(" 具体的请求流程，你可以参考下图：\n"),t("img",{attrs:{src:e(445),alt:"http1.0"}})]),_._v(" "),t("p",[_._v("那 "),t("code",[_._v("HTTP/1.0")]),_._v(" 是怎么通过请求头和响应头来支持多种不同类型的数据呢？\n要支持多种类型的文件，我们就需要解决以下几个问题：")]),_._v(" "),t("ul",[t("li",[_._v("浏览器需要知道服务器返回的数据是什么 "),t("code",[_._v("类型")]),_._v(" ，从而做针对性处理")]),_._v(" "),t("li",[_._v("为了减轻传输性能，服务器会对数据进行压缩后再传输，所以浏览器需要知道服务器 "),t("code",[_._v("压缩方法")])]),_._v(" "),t("li",[_._v("提供 "),t("code",[_._v("国际化")]),_._v(" 的支持")]),_._v(" "),t("li",[_._v("需要知道不同类型文件的 "),t("code",[_._v("编码类型")])])]),_._v(" "),t("p",[_._v("基于以上问题，"),t("code",[_._v("HTTP/1.0")]),_._v(" 的方案是通过请求头和响应头来进行协商。")]),_._v(" "),t("p",[_._v("在发起请求时候会通过 "),t("code",[_._v("HTTP")]),_._v(" 请求头告诉服务器它期待服务器返回什么类型的文件、采取什么形式的压缩、提供什么语言的文件以及文件的具体编码。")]),_._v(" "),t("p",[_._v("最终发送出来的请求头内容如下：")]),_._v(" "),t("div",{staticClass:"language-sh line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[_._v("# 接受类型")]),_._v("\naccept: text/html\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[_._v("# 接受压缩方式")]),_._v("\naccept-encoding: gzip, deflate, br\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[_._v("# 接受字符编码")]),_._v("\naccept-Charset: ISO-8859-1,utf-8\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[_._v("# 期望页面的优先语言")]),_._v("\naccept-language: zh-CN,zh\n")])]),_._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[_._v("1")]),t("br"),t("span",{staticClass:"line-number"},[_._v("2")]),t("br"),t("span",{staticClass:"line-number"},[_._v("3")]),t("br"),t("span",{staticClass:"line-number"},[_._v("4")]),t("br"),t("span",{staticClass:"line-number"},[_._v("5")]),t("br"),t("span",{staticClass:"line-number"},[_._v("6")]),t("br"),t("span",{staticClass:"line-number"},[_._v("7")]),t("br"),t("span",{staticClass:"line-number"},[_._v("8")]),t("br")])]),t("p",[_._v("最终浏览器需要根据 "),t("code",[_._v("响应头")]),_._v(" 的信息来处理数据。下面是一段 "),t("code",[_._v("响应头")]),_._v(" 的数据信息：")]),_._v(" "),t("div",{staticClass:"language-sh line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[_._v("# 返回内容的压缩方式")]),_._v("\ncontent-encoding: br\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[_._v("# 返回文件类型及编码")]),_._v("\ncontent-type: text/html"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(";")]),_._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[_._v("charset")]),t("span",{pre:!0,attrs:{class:"token operator"}},[_._v("=")]),_._v("UTF-8\n")])]),_._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[_._v("1")]),t("br"),t("span",{staticClass:"line-number"},[_._v("2")]),t("br"),t("span",{staticClass:"line-number"},[_._v("3")]),t("br"),t("span",{staticClass:"line-number"},[_._v("4")]),t("br")])]),t("p",[t("code",[_._v("HTTP/1.0")]),_._v(" 除了对 "),t("code",[_._v("多文件")]),_._v(" 提供良好的支持外，还依据当时实际的需求引入了很多其他的特性。")]),_._v(" "),t("p",[_._v("这些特性都是通过 "),t("code",[_._v("请求头")]),_._v(" 和 "),t("code",[_._v("响应头")]),_._v(" 来实现的。下面我们来看看新增的几个典型的特性：")]),_._v(" "),t("ul",[t("li",[_._v("引入了"),t("strong",[_._v("状态码")]),_._v("。状态码 是通过 "),t("code",[_._v("响应行")]),_._v(" 的方式来通知 "),t("code",[_._v("浏览器")]),_._v(" 的。")]),_._v(" "),t("li",[_._v("在 "),t("code",[_._v("HTTP/1.0")]),_._v(" 中提供了 "),t("code",[_._v("Cache")]),_._v(" 机制，用来缓存已经下载过的数据。")]),_._v(" "),t("li",[t("code",[_._v("HTTP/1.0")]),_._v(" 的请求头中还加入了 "),t("code",[_._v("用户代理")]),_._v(" 的字段。")])]),_._v(" "),t("h2",{attrs:{id:"缝缝补补的-http-1-1"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#缝缝补补的-http-1-1"}},[_._v("#")]),_._v(" 缝缝补补的 HTTP/1.1")]),_._v(" "),t("p",[_._v("不过随着技术的继续发展，需求也在不断迭代更新，很快 "),t("code",[_._v("HTTP/1.0")]),_._v(" 也不能满足需求了，所以 "),t("code",[_._v("HTTP/1.1")]),_._v(" 又在 "),t("code",[_._v("HTTP/1.0")]),_._v(" 的基础之上做了大量的更新。")]),_._v(" "),t("h3",{attrs:{id:"_1、改进持久连接"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、改进持久连接"}},[_._v("#")]),_._v(" 1、改进持久连接")]),_._v(" "),t("p",[t("code",[_._v("HTTP/1.0")]),_._v(" 每进行一次 "),t("code",[_._v("HTTP")]),_._v(" 通信，都需要经历建立 "),t("code",[_._v("TCP")]),_._v(" 连接、传输 "),t("code",[_._v("HTTP")]),_._v(" 数据和断开 "),t("code",[_._v("TCP")]),_._v(" 连接三个阶段。")]),_._v(" "),t("p",[_._v("随着浏览器普及，单个页面中的图片文件越来越多，有时候一个页面可能包含了几百个外部引用的资源文件，这样的传输方式会增加大量无谓的开销。")]),_._v(" "),t("p",[_._v("于是 "),t("code",[_._v("HTTP/1.1")]),_._v(" 中增加了持久连接的方法，它的特点是在一个 "),t("code",[_._v("TCP")]),_._v(" 连接上可以传输多个 "),t("code",[_._v("HTTP")]),_._v(" 请求，只要浏览器或者服务器没有明确断开连接，那么该 "),t("code",[_._v("TCP")]),_._v(" 连接会一直保持。")]),_._v(" "),t("p",[_._v("持久连接在 "),t("code",[_._v("HTTP/1.1")]),_._v(" 中是默认开启的，所以你不需要专门为了持久连接去 "),t("code",[_._v("HTTP")]),_._v(" 请求头设置信息。")]),_._v(" "),t("p",[_._v("如果你不想要采用持久连接，可以在 "),t("code",[_._v("HTTP")]),_._v(" 请求头中加上 "),t("code",[_._v("Connection: close")]),_._v(" 。")]),_._v(" "),t("p",[_._v("目前浏览器中对于 "),t("code",[_._v("同一个域名")]),_._v(" ，默认允许同时建立 "),t("code",[_._v("6")]),_._v(" 个 "),t("code",[_._v("TCP")]),_._v(" 持久连接。")]),_._v(" "),t("h3",{attrs:{id:"_2、不成熟的-http-管线化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、不成熟的-http-管线化"}},[_._v("#")]),_._v(" 2、不成熟的 HTTP 管线化")]),_._v(" "),t("p",[_._v("持久连接虽然能减少 "),t("code",[_._v("TCP")]),_._v(" 的建立和断开次数，但是它需要等待前面的请求返回之后，才能进行下一次请求。")]),_._v(" "),t("p",[_._v("如果 "),t("code",[_._v("TCP")]),_._v(" 通道中的某个请求因为某些原因没有及时返回，那么就会阻塞后面的所有请求，这就是著名的 "),t("strong",[_._v("队头阻塞")]),_._v(" 的问题。")]),_._v(" "),t("p",[t("code",[_._v("HTTP/1.1")]),_._v(" 中试图通过管线化的技术来解决队头阻塞的问题。 "),t("code",[_._v("HTTP")]),_._v(" 请求整批提交给服务器，不过服务器依然需要根据 "),t("code",[_._v("请求顺序")]),_._v(" 来回复浏览器的请求。")]),_._v(" "),t("h3",{attrs:{id:"_3、提供虚拟主机的支持"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3、提供虚拟主机的支持"}},[_._v("#")]),_._v(" 3、提供虚拟主机的支持")]),_._v(" "),t("p",[_._v("在 "),t("code",[_._v("HTTP/1.0")]),_._v(" 中，每个域名绑定了一个唯一的 IP 地址，因此一个服务器只能支持一个域名。")]),_._v(" "),t("p",[t("code",[_._v("HTTP/1.1")]),_._v(" 的请求头中增加了 "),t("code",[_._v("Host")]),_._v(" 字段，用来表示当前的域名地址，这样服务器就可以根据不同的 "),t("code",[_._v("Host")]),_._v(" 值做不同的处理。")]),_._v(" "),t("h3",{attrs:{id:"_4、对动态生成的内容提供了完美支持"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4、对动态生成的内容提供了完美支持"}},[_._v("#")]),_._v(" 4、对动态生成的内容提供了完美支持")]),_._v(" "),t("p",[_._v("在设计 "),t("code",[_._v("HTTP/1.0")]),_._v(" 时，需要在响应头中设置完整的数据大小，如 "),t("code",[_._v("Content-Length: 901")]),_._v(" ，这样浏览器就可以根据设置的数据大小来接收数据。")]),_._v(" "),t("p",[t("code",[_._v("HTTP/1.1")]),_._v(" 通过引入 "),t("code",[_._v("Chunk transfer")]),_._v(" 机制来解决这个问题。")]),_._v(" "),t("p",[_._v("服务器会将数据 "),t("code",[_._v("分割")]),_._v(" 成若干个任意大小的 "),t("code",[_._v("数据块")]),_._v(" ，每个数据块发送时会附上上个数据块的长度，最后使用一个 "),t("code",[_._v("零长度")]),_._v(" 的块作为 "),t("code",[_._v("发送数据完成")]),_._v(" 的标志。这样就提供了对动态内容的支持。")]),_._v(" "),t("h3",{attrs:{id:"_5、客户端-cookie、安全机制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5、客户端-cookie、安全机制"}},[_._v("#")]),_._v(" 5、客户端 Cookie、安全机制")]),_._v(" "),t("p",[t("code",[_._v("HTTP/1.1")]),_._v(" 还引入了客户端 "),t("code",[_._v("Cookie 机制")]),_._v(" 和 "),t("code",[_._v("安全机制")]),_._v(" 。")]),_._v(" "),t("h2",{attrs:{id:"http-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#http-2"}},[_._v("#")]),_._v(" HTTP/2")]),_._v(" "),t("h3",{attrs:{id:"http-1-1-的主要问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#http-1-1-的主要问题"}},[_._v("#")]),_._v(" HTTP/1.1 的主要问题")]),_._v(" "),t("p",[_._v("虽然 "),t("code",[_._v("HTTP/1.1")]),_._v(" 采取了很多优化资源加载速度的策略，也取得了一定的效果。但是 "),t("code",[_._v("HTTP/1.1")]),_._v(" 对"),t("strong",[_._v("带宽的利用率却并不理想")]),_._v("，这也是 "),t("code",[_._v("HTTP/1.1")]),_._v(" 的一个核心问题。因为 "),t("code",[_._v("HTTP/1.1")]),_._v(" 很难将带宽用满。")]),_._v(" "),t("p",[_._v("之所以会出现这个问题，主要是由以下三个原因导致的：")]),_._v(" "),t("ul",[t("li",[t("strong",[_._v("TCP 的慢启动")])])]),_._v(" "),t("p",[_._v("刚开始 "),t("code",[_._v("TCP")]),_._v(" 协议会采用一个 "),t("code",[_._v("非常慢")]),_._v(" 的速度去发送数据，然后 "),t("code",[_._v("慢慢加快")]),_._v(" 发送数据的速度，直到发送数据的速度达到一个理想状态，我们把这个过程称为 "),t("code",[_._v("慢启动")]),_._v(" 。")]),_._v(" "),t("p",[_._v("慢启动 是 "),t("code",[_._v("TCP")]),_._v(" 为了 "),t("strong",[_._v("减少网络拥塞")]),_._v(" 的一种策略，我们是没有办法改变的。")]),_._v(" "),t("p",[_._v("但是 "),t("code",[_._v("慢启动")]),_._v(" 会带来 "),t("code",[_._v("性能问题")]),_._v(" ，因为 "),t("code",[_._v("慢启动")]),_._v(" 会推迟宝贵的 "),t("code",[_._v("首次渲染")]),_._v(" 页面的时长。")]),_._v(" "),t("ul",[t("li",[t("strong",[_._v("同时开启了多条 TCP 连接，那么这些连接会竞争固定的带宽")])])]),_._v(" "),t("p",[_._v("多条 "),t("code",[_._v("TCP")]),_._v(" 连接之间又不能协商让哪些关键资源优先下载，这样就有可能影响那些关键资源的下载速度了。")]),_._v(" "),t("ul",[t("li",[t("strong",[_._v("HTTP/1.1 队头阻塞的问题")])])]),_._v(" "),t("p",[t("code",[_._v("HTTP/1.1")]),_._v(" 中使用持久连接时，虽然能公用一个 "),t("code",[_._v("TCP")]),_._v(" 管道，但是在一个管道中 "),t("code",[_._v("同一时刻")]),_._v(" 只能处理 "),t("code",[_._v("一个请求")]),_._v(" ，在当前的请求没有结束之前，其他的请求只能处于 "),t("code",[_._v("阻塞状态")]),_._v(" 。")]),_._v(" "),t("p",[t("code",[_._v("队头阻塞")]),_._v(" 使得这些数据不能 "),t("code",[_._v("并行")]),_._v(" 请求，所以 "),t("code",[_._v("队头阻塞")]),_._v(" 是很不利于浏览器优化的。")]),_._v(" "),t("h3",{attrs:{id:"http-2-的多路复用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#http-2-的多路复用"}},[_._v("#")]),_._v(" HTTP/2 的多路复用")]),_._v(" "),t("p",[t("code",[_._v("HTTP/1.1")]),_._v(" 所存在的一些主要问题：")]),_._v(" "),t("ul",[t("li",[t("code",[_._v("慢启动")]),_._v(" 和 "),t("code",[_._v("TCP")]),_._v(" 连接之间相互竞争带宽是由于 "),t("code",[_._v("TCP")]),_._v(" 本身的机制导致的")]),_._v(" "),t("li",[t("code",[_._v("队头阻塞")]),_._v(" 是由于 "),t("code",[_._v("HTTP/1.1")]),_._v(" 的机制导致的。")])]),_._v(" "),t("p",[_._v("虽然 "),t("code",[_._v("TCP")]),_._v(" 有问题，但是我们依然没有换掉 "),t("code",[_._v("TCP")]),_._v(" 的能力，所以我们就要想办法去规避 "),t("code",[_._v("TCP")]),_._v(" 的慢启动和 "),t("code",[_._v("TCP")]),_._v(" 连接之间的竞争问题。")]),_._v(" "),t("p",[_._v("基于此，"),t("code",[_._v("HTTP/2")]),_._v(" 的思路就是 "),t("code",[_._v("一个域名")]),_._v(" 只使用一个 "),t("code",[_._v("TCP")]),_._v(" 长连接来传输数据，这样整个页面资源的下载过程只需要 "),t("code",[_._v("一次慢启动")]),_._v(" ，同时也避免了多个 "),t("code",[_._v("TCP")]),_._v(" 连接竞争带宽所带来的问题。")]),_._v(" "),t("p",[_._v("另外，解决 "),t("code",[_._v("队头阻塞")]),_._v(" 的问题，"),t("code",[_._v("HTTP/2")]),_._v(" 需要实现资源的并行请求。")]),_._v(" "),t("p",[_._v("所以，"),t("code",[_._v("HTTP/2")]),_._v(" 的解决方案可以总结为："),t("strong",[_._v("一个域名只使用一个 TCP 长连接和消除队头阻塞问题")]),_._v("。")]),_._v(" "),t("p",[t("img",{attrs:{src:e(446),alt:"multiplexing"}})]),_._v(" "),t("p",[_._v("该图就是 "),t("code",[_._v("HTTP/2")]),_._v(" 最核心、最重要且最具颠覆性的 "),t("strong",[_._v("多路复用机制")]),_._v("。")]),_._v(" "),t("p",[t("code",[_._v("HTTP/2")]),_._v(" 使用了 "),t("code",[_._v("多路复用")]),_._v(" 技术，可以将请求分成 "),t("code",[_._v("一帧一帧")]),_._v(" 的数据去传输，这样带来了一个额外的好处，就是当收到一个 "),t("code",[_._v("优先级高")]),_._v(" 的请求时，比如接收到 "),t("code",[_._v("JavaScript")]),_._v(" 或者 "),t("code",[_._v("CSS")]),_._v(" 关键资源的请求，服务器可以暂停之前的请求来优先处理关键资源的请求。")]),_._v(" "),t("h3",{attrs:{id:"多路复用的实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#多路复用的实现"}},[_._v("#")]),_._v(" 多路复用的实现")]),_._v(" "),t("p",[t("img",{attrs:{src:e(447),alt:"http2-protocol-stack"}})]),_._v(" "),t("p",[t("strong",[_._v("HTTP/2 通过添加一个二进制分帧层，就实现了 HTTP 的多路复用技术")]),_._v("。")]),_._v(" "),t("p",[t("code",[_._v("二进制分帧层")]),_._v(" 的流程如下：")]),_._v(" "),t("ul",[t("li",[_._v("将之前的请求数据，转换为一个个带有请求 "),t("code",[_._v("ID")]),_._v(" 编号的帧，通过协议栈将这些帧发送给服务器。")]),_._v(" "),t("li",[_._v("服务器接收到所有帧之后，会将所有相同 "),t("code",[_._v("ID")]),_._v(" 的帧合并为一条完整的请求信息。")]),_._v(" "),t("li",[_._v("然后服务器处理该条请求，并将处理的响应行、响应头和响应体分别发送至二进制分帧层。")]),_._v(" "),t("li",[_._v("同样，二进制分帧层会将这些响应数据转换为一个个带有请求 "),t("code",[_._v("ID")]),_._v(" 编号的帧，经过协议栈发送给浏览器。")])]),_._v(" "),t("p",[_._v("可以从上面的流程看到，虽然 "),t("code",[_._v("HTTP/2")]),_._v(" 引入了二进制分帧层，不过 "),t("code",[_._v("HTTP/2")]),_._v(" 的语义和 "),t("code",[_._v("HTTP/1.1")]),_._v(" 依然是一样的，也就是说它们通信的语言并没有改变。")]),_._v(" "),t("p",[_._v("这一点对开发者来说尤为重要，这意味着我们不需要为 "),t("code",[_._v("HTTP/2")]),_._v(" 去重建生态，并且 "),t("code",[_._v("HTTP/2")]),_._v(" 推广起来会也相对更轻松了。")]),_._v(" "),t("h3",{attrs:{id:"http-2-其他特性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#http-2-其他特性"}},[_._v("#")]),_._v(" HTTP/2 其他特性")]),_._v(" "),t("p",[t("strong",[_._v("1. 可以设置请求的优先级")])]),_._v(" "),t("p",[t("code",[_._v("HTTP/2")]),_._v(" 提供了请求优先级，可以在发送请求时，标上该请求的优先级，这样服务器接收到请求之后，会优先处理优先级高的请求。")]),_._v(" "),t("p",[_._v("这样可以使得重要的请求，可以优先被服务器处理。")]),_._v(" "),t("p",[t("strong",[_._v("2. 服务器推送")])]),_._v(" "),t("p",[t("code",[_._v("HTTP/2")]),_._v(" 还可以直接将数据提前推送到浏览器。该特性可以使得服务器可以自主的根据用户请求连接 提前推送 相关的资源，这对首次打开页面的速度起到了至关重要的作用。")]),_._v(" "),t("p",[t("strong",[_._v("3. 头部压缩")])]),_._v(" "),t("p",[t("code",[_._v("HTTP/2")]),_._v(" 对请求头和响应头进行了压缩。其实在浏览器发送请求的时候，基本上都是发送 "),t("code",[_._v("HTTP")]),_._v(" 请求头，很少有请求体的发送。")]),_._v(" "),t("p",[_._v("通常情况下页面也有 100 个左右的资源，如果将这 100 个请求头的数据压缩为原来的 20%，那么传输效率肯定能得到大幅提升。")])])}),[],!1,null,null,null);v.default=c.exports}}]);