(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{465:function(t,_,s){t.exports=s.p+"assets/img/rendering-pipeline.9259f873.png"},466:function(t,_,s){t.exports=s.p+"assets/img/layout-layer.e8a7e60a.png"},467:function(t,_,s){t.exports=s.p+"assets/img/paint.40825a55.png"},468:function(t,_,s){t.exports=s.p+"assets/img/synthetic-thread.46d33b6e.png"},469:function(t,_,s){t.exports=s.p+"assets/img/tile.bcc7f698.png"},470:function(t,_,s){t.exports=s.p+"assets/img/raster.d8d77356.png"},471:function(t,_,s){t.exports=s.p+"assets/img/gpu-raster.a8d954cd.png"},472:function(t,_,s){t.exports=s.p+"assets/img/reflow.b3ed5652.png"},473:function(t,_,s){t.exports=s.p+"assets/img/repaint.3c1b7310.png"},474:function(t,_,s){t.exports=s.p+"assets/img/draw.024bf6c8.png"},606:function(t,_,s){"use strict";s.r(_);var v=s(22),a=Object(v.a)({},(function(){var t=this,_=t.$createElement,v=t._self._c||_;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h2",{attrs:{id:"渲染流水线"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#渲染流水线"}},[t._v("#")]),t._v(" 渲染流水线")]),t._v(" "),v("p",[t._v("由于渲染机制过于复杂，所以渲染模块在执行过程中会被划分为很多子阶段，输入的 HTML 经过这些子阶段，最后输出像素。我们把这样的一个处理流程叫做"),v("strong",[t._v("渲染流水线")]),t._v("，其大致流程如下图所示：")]),t._v(" "),v("p",[v("img",{attrs:{src:s(465),alt:"rendering-pipeline"}})]),t._v(" "),v("p",[t._v("按照渲染的时间顺序，流水线可分为如下几个子阶段："),v("strong",[t._v("构建 DOM 树")]),t._v("、"),v("strong",[t._v("样式计算")]),t._v("、"),v("strong",[t._v("布局阶段")]),t._v("、"),v("strong",[t._v("分层")]),t._v("、"),v("strong",[t._v("绘制")]),t._v("、"),v("strong",[t._v("分块")]),t._v("、"),v("strong",[t._v("光栅化")]),t._v("和"),v("strong",[t._v("合成")]),t._v("。")]),t._v(" "),v("h2",{attrs:{id:"构建dom树"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#构建dom树"}},[t._v("#")]),t._v(" 构建DOM树")]),t._v(" "),v("p",[v("strong",[t._v("浏览器无法直接理解和使用 HTML，所以需要将 HTML 转换为浏览器能够理解的结构——DOM 树")]),t._v("。")]),t._v(" "),v("p",[t._v("DOM 是保存在内存中树状结构，可以通过 JavaScript 来查询或修改其内容。")]),t._v(" "),v("p",[t._v("生成 DOM 后，节点的样式我们依然不知道，要让 DOM 节点拥有正确的样式，这就需要样式计算了。")]),t._v(" "),v("h2",{attrs:{id:"样式计算-recalculate-style"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#样式计算-recalculate-style"}},[t._v("#")]),t._v(" 样式计算（Recalculate Style）")]),t._v(" "),v("p",[t._v("样式计算的目的是为了计算出 DOM 节点中每个元素的具体样式，这个阶段大体可分为三步来完成。")]),t._v(" "),v("h3",{attrs:{id:"_1-把-css-转换为浏览器能够理解的结构"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-把-css-转换为浏览器能够理解的结构"}},[t._v("#")]),t._v(" 1. 把 CSS 转换为浏览器能够理解的结构")]),t._v(" "),v("p",[t._v("CSS 样式的主要来源有三个:")]),t._v(" "),v("ul",[v("li",[t._v("通过 link 引用的外部 CSS 文件")]),t._v(" "),v("li",[v("code",[t._v("<style>")]),t._v("标记内的 CSS")]),t._v(" "),v("li",[t._v("元素的 style 属性内嵌的 CSS")])]),t._v(" "),v("p",[t._v("和 HTML 文件一样，浏览器也是无法直接理解这些纯文本的 CSS 样式，所以"),v("strong",[t._v("当渲染引擎接收到 CSS 文本时，会执行一个转换操作，将 CSS 文本转换为浏览器可以理解的结构——styleSheets")]),t._v("。")]),t._v(" "),v("h3",{attrs:{id:"_2-转换样式表中的属性值-使其标准化"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-转换样式表中的属性值-使其标准化"}},[t._v("#")]),t._v(" 2. 转换样式表中的属性值，使其标准化")]),t._v(" "),v("p",[t._v("现在我们已经把现有的 CSS 文本转化为浏览器可以理解的结构了，那么"),v("strong",[t._v("接下来就要对其进行属性值的标准化操作")]),t._v("。")]),t._v(" "),v("p",[v("strong",[t._v("需要将所有值转换为渲染引擎容易理解的、标准化的计算值")]),t._v("，这个过程就是属性值标准化。")]),t._v(" "),v("h3",{attrs:{id:"_3-计算出-dom-树中每个节点的具体样式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-计算出-dom-树中每个节点的具体样式"}},[t._v("#")]),t._v(" 3. 计算出 DOM 树中每个节点的具体样式")]),t._v(" "),v("p",[t._v("现在样式的属性已被标准化了，接下来就需要计算 DOM 树中每个节点的样式属性了，如何计算呢？")]),t._v(" "),v("p",[v("strong",[t._v("这就涉及到 CSS 的继承规则和层叠规则了。")])]),t._v(" "),v("p",[t._v("首先是 CSS 继承。"),v("strong",[t._v("CSS 继承就是每个 DOM 节点都包含有父节点的样式")]),t._v("。")]),t._v(" "),v("p",[t._v("样式计算过程中的第二个规则是样式层叠。"),v("strong",[t._v("层叠是 CSS 的一个基本特征，它是一个定义了如何合并来自多个源的属性值的算法。它在 CSS 处于核心地位，CSS 的全称“层叠样式表”正是强调了这一点")]),t._v("。")]),t._v(" "),v("p",[t._v("总之，样式计算阶段的目的是为了计算出 DOM 节点中每个元素的具体样式，在计算过程中需要遵守 CSS 的继承和层叠两个规则。这个阶段最终输出的内容是每个 DOM 节点的样式，并被保存在 "),v("strong",[t._v("ComputedStyle")]),t._v(" 的结构内。")]),t._v(" "),v("h2",{attrs:{id:"布局阶段"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#布局阶段"}},[t._v("#")]),t._v(" 布局阶段")]),t._v(" "),v("p",[t._v("现在，我们有 DOM 树和 DOM 树中元素的样式，但这还不足以显示页面，因为我们还不知道 DOM 元素的几何位置信息。"),v("strong",[t._v("那么接下来就需要计算出 DOM 树中可见元素的几何位置，我们把这个计算过程叫做布局")]),t._v("。")]),t._v(" "),v("p",[t._v("Chrome 在布局阶段需要完成两个任务：创建布局树和布局计算。")]),t._v(" "),v("h3",{attrs:{id:"_1-创建布局树"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-创建布局树"}},[t._v("#")]),t._v(" 1. 创建布局树")]),t._v(" "),v("p",[t._v("所以"),v("strong",[t._v("在显示之前，我们还要额外地构建一棵只包含可见元素布局树")]),t._v("。")]),t._v(" "),v("p",[t._v("为了构建布局树，浏览器大体上完成了下面这些工作：")]),t._v(" "),v("ul",[v("li",[t._v("遍历 DOM 树中的所有可见节点，并把这些节点加到布局中；")]),t._v(" "),v("li",[v("strong",[t._v("不可见的节点会被布局树忽略掉")]),t._v("，如 head 标签下面的全部内容，再比如 body.p.span 这个元素，因为它的属性包含 dispaly:none，所以这个元素也没有被包进布局树。")])]),t._v(" "),v("h3",{attrs:{id:"_2-布局计算"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-布局计算"}},[t._v("#")]),t._v(" 2. 布局计算")]),t._v(" "),v("p",[t._v("现在我们有了一棵完整的布局树。那么接下来，就要计算布局树节点的坐标位置了。")]),t._v(" "),v("p",[t._v("在执行布局操作的时候，会把布局运算的结果重新写回布局树中，所以布局树既是输入内容也是输出内容，这是布局阶段一个不合理的地方，因为在布局阶段并没有清晰地将输入内容和输出内容区分开来。")]),t._v(" "),v("h2",{attrs:{id:"分层"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#分层"}},[t._v("#")]),t._v(" 分层")]),t._v(" "),v("p",[t._v("因为页面中有很多复杂的效果，如一些复杂的 3D 变换、页面滚动，或者使用 z-indexing 做 z 轴排序等，为了更加方便地实现这些效果，"),v("strong",[t._v("渲染引擎还需要为特定的节点生成专用的图层，并生成一棵对应的图层树")]),t._v("（LayerTree）。")]),t._v(" "),v("p",[v("strong",[t._v("浏览器的页面实际上被分成了很多图层，这些图层叠加后合成了最终的页面")]),t._v("。下面我们再来看看这些图层和布局树节点之间的关系，如文中图所示：")]),t._v(" "),v("p",[v("img",{attrs:{src:s(466),alt:"layout-layer"}})]),t._v(" "),v("p",[t._v("通常情况下，"),v("strong",[t._v("并不是布局树的每个节点都包含一个图层，如果一个节点没有对应的层，那么这个节点就从属于父节点的图层")]),t._v("。")]),t._v(" "),v("p",[t._v("那么需要满足什么条件，渲染引擎才会为特定的节点创建新的层呢？通常满足下面两点中任意一点的元素就可以被提升为单独的一个图层。")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("**第一点，拥有层叠上下文属性的元素会被提升为单独的一层。**明确定位属性的元素、定义透明属性的元素、使用 CSS 滤镜的元素等，都拥有层叠上下文属性。")])]),t._v(" "),v("li",[v("p",[v("strong",[t._v("第二点，需要剪裁（clip）的地方也会被创建为图层。")])])])]),t._v(" "),v("h2",{attrs:{id:"图层绘制"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#图层绘制"}},[t._v("#")]),t._v(" 图层绘制")]),t._v(" "),v("p",[t._v("渲染引擎实现图层的绘制会分步操作，会把一个图层的绘制拆分成很多小的"),v("strong",[t._v("绘制指令")]),t._v("，然后再把这些指令按照顺序组成一个待绘制列表，如下图所示：")]),t._v(" "),v("p",[v("img",{attrs:{src:s(467),alt:"paint"}})]),t._v(" "),v("h2",{attrs:{id:"栅格化-raster-操作"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#栅格化-raster-操作"}},[t._v("#")]),t._v(" 栅格化（raster）操作")]),t._v(" "),v("p",[t._v("绘制列表只是用来记录绘制顺序和绘制指令的列表，而实际上绘制操作是由渲染引擎中的合成线程来完成的。你可以结合下图来看下渲染主线程和合成线程之间的关系：")]),t._v(" "),v("p",[v("img",{attrs:{src:s(468),alt:"synthetic-thread"}})]),t._v(" "),v("p",[v("strong",[t._v("合成线程会将图层划分为图块（tile）")]),t._v(":")]),t._v(" "),v("p",[v("img",{attrs:{src:s(469),alt:"tile"}})]),t._v(" "),v("p",[t._v("然后"),v("strong",[t._v("合成线程会按照视口附近的图块来优先生成位图，实际生成位图的操作是由栅格化来执行的。所谓栅格化，是指将图块转换为位图")]),t._v("。而图块是栅格化执行的最小单位。渲染进程维护了一个栅格化的线程池，所有的图块栅格化都是在线程池内执行的，运行方式如下图所示：")]),t._v(" "),v("p",[v("img",{attrs:{src:s(470),alt:"raster"}})]),t._v(" "),v("p",[t._v("通常，"),v("strong",[t._v("栅格化过程都会使用 GPU 来加速生成，使用 GPU 生成位图的过程叫快速栅格化")]),t._v("，或者 GPU 栅格化，生成的位图被保存在 GPU 内存中。")]),t._v(" "),v("p",[v("img",{attrs:{src:s(471),alt:"gpu-raster"}})]),t._v(" "),v("h2",{attrs:{id:"合成和显示"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#合成和显示"}},[t._v("#")]),t._v(" 合成和显示")]),t._v(" "),v("p",[t._v("一旦所有图块都被光栅化，合成线程就会生成一个绘制图块的命令——“"),v("strong",[t._v("DrawQuad")]),t._v("”，然后将该命令提交给浏览器进程。")]),t._v(" "),v("p",[t._v("浏览器进程里面有一个叫 viz 的组件，用来接收合成线程发过来的 DrawQuad 命令，然后根据 DrawQuad 命令，将其页面内容绘制到内存中，最后再将内存显示在屏幕上。")]),t._v(" "),v("h2",{attrs:{id:"重排重绘和合成"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#重排重绘和合成"}},[t._v("#")]),t._v(" 重排重绘和合成")]),t._v(" "),v("h3",{attrs:{id:"重排-回流-更新元素的几何属性"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#重排-回流-更新元素的几何属性"}},[t._v("#")]),t._v(" 重排/回流-更新元素的几何属性")]),t._v(" "),v("p",[t._v("如果你通过 JavaScript 或者 CSS 修改元素的几何位置属性，例如改变元素的宽度、高度等，那么浏览器会触发重新布局，解析之后的一系列子阶段，这个过程就叫"),v("strong",[t._v("重排")]),t._v("。无疑，"),v("strong",[t._v("重排需要更新完整的渲染流水线，所以开销也是最大的")]),t._v("。")]),t._v(" "),v("p",[v("img",{attrs:{src:s(472),alt:"reflow"}})]),t._v(" "),v("h3",{attrs:{id:"重绘-更新元素的绘制属性"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#重绘-更新元素的绘制属性"}},[t._v("#")]),t._v(" 重绘-更新元素的绘制属性")]),t._v(" "),v("p",[t._v("如果修改了元素的背景颜色，那么布局阶段将不会被执行，因为并没有引起几何位置的变换，所以就直接进入了绘制阶段，然后执行之后的一系列子阶段，这个过程就叫"),v("strong",[t._v("重绘")]),t._v("。相较于重排操作，"),v("strong",[t._v("重绘省去了布局和分层阶段，所以执行效率会比重排操作要高一些")]),t._v("。")]),t._v(" "),v("p",[v("img",{attrs:{src:s(473),alt:"repaint"}})]),t._v(" "),v("h3",{attrs:{id:"直接合成阶段"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#直接合成阶段"}},[t._v("#")]),t._v(" 直接合成阶段")]),t._v(" "),v("p",[t._v("那如果你更改一个既不要布局也不要绘制的属性，会发生什么变化呢？渲染引擎将跳过布局和绘制，只执行后续的合成操作，我们把这个过程叫做"),v("strong",[t._v("合成")]),t._v("。具体流程参考下图：")]),t._v(" "),v("p",[v("img",{attrs:{src:s(474),alt:"draw"}})]),t._v(" "),v("p",[t._v("在上图中，我们使用了 CSS 的 transform 来实现动画效果，这可以避开重排和重绘阶段，直接在非主线程上执行合成动画操作。这样的效率是最高的，因为是在非主线程上合成，并没有占用主线程的资源，另外也避开了布局和绘制两个子阶段，所以"),v("strong",[t._v("相对于重绘和重排，合成能大大提升绘制效率")]),t._v("。")])])}),[],!1,null,null,null);_.default=a.exports}}]);