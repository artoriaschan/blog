(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{485:function(t,a,s){t.exports=s.p+"assets/img/compiler&interpreter.5a750a25.png"},486:function(t,a,s){t.exports=s.p+"assets/img/v8.8c56a05a.png"},487:function(t,a,s){t.exports=s.p+"assets/img/ast-example.b4d7dfcf.png"},488:function(t,a,s){t.exports=s.p+"assets/img/bytecode.f0d2ad6f.png"},609:function(t,a,s){"use strict";s.r(a);var r=s(22),n=Object(r.a)({},(function(){var t=this,a=t.$createElement,r=t._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h2",{attrs:{id:"编译器和解释器"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#编译器和解释器"}},[t._v("#")]),t._v(" 编译器和解释器")]),t._v(" "),r("p",[t._v("之所以存在编译器和解释器，是因为机器不能直接理解我们所写的代码，所以在执行程序之 前，需要将我们所写的代码“翻译”成机器能读懂的机器语言。按语言的执行流程，可以把 语言划分为编译型语言和解释型语言。")]),t._v(" "),r("p",[t._v("**编译型语言在程序执行之前，需要经过编译器的编译过程，并且编译之后会直接保留机器能 读懂的二进制文件，这样每次运行程序时，都可以直接运行该二进制文件，而不需要再次重 新编译了。**比如 C/C++、GO 等都是编译型语言。")]),t._v(" "),r("p",[r("strong",[t._v("而由解释型语言编写的程序，在每次运行时都需要通过解释器对程序进行动态解释和执行。")]),t._v(" 比如 Python、JavaScript 等都属于解释型语言。")]),t._v(" "),r("p",[r("img",{attrs:{src:s(485),alt:"compiler&interpreter"}})]),t._v(" "),r("h2",{attrs:{id:"v8-是如何执行一段-javascript-代码的"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#v8-是如何执行一段-javascript-代码的"}},[t._v("#")]),t._v(" V8 是如何执行一段 JavaScript 代码的")]),t._v(" "),r("p",[t._v("你可以先来“一览全局”，参考下图：")]),t._v(" "),r("p",[r("img",{attrs:{src:s(486),alt:"v8"}})]),t._v(" "),r("p",[t._v("从图中可以清楚地看到，V8 在执行过程中既有"),r("strong",[t._v("解释器 Ignition")]),t._v("，又有"),r("strong",[t._v("编译器 TurboFan")])]),t._v(" "),r("h3",{attrs:{id:"生成抽象语法树和执行上下文"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#生成抽象语法树和执行上下文"}},[t._v("#")]),t._v(" 生成抽象语法树和执行上下文")]),t._v(" "),r("p",[t._v("高级语言是开发者可以理解的语言，但是让编译器或者解释器来理解就非常困难了。对于编 译器或者解释器来说，它们可以理解的就是 AST 了。所以无论你使用的是解释型语言还是 编译型语言，在编译过程中，它们都会生成一个 AST。")]),t._v(" "),r("p",[t._v("举例如下:")]),t._v(" "),r("div",{staticClass:"language-javascript line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-javascript"}},[r("code",[r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("42")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" b "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("addA")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("d")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" a "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" d"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" c "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("addA")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" b"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[t._v("1")]),r("br"),r("span",{staticClass:"line-number"},[t._v("2")]),r("br"),r("span",{staticClass:"line-number"},[t._v("3")]),r("br"),r("span",{staticClass:"line-number"},[t._v("4")]),r("br"),r("span",{staticClass:"line-number"},[t._v("5")]),r("br"),r("span",{staticClass:"line-number"},[t._v("6")]),r("br")])]),r("p",[t._v("上述代码所生成的tokens如下:")]),t._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("Keyword(var)Identifier(a)Punctuator(=)Numeric(42)Punctuator(;)\nKeyword(var)Identifier(b)Punctuator(=)Numeric(5)Punctuator(;)\nKeyword(function)Identifier(addA)Punctuator(()Identifier(d)Punctuator())Punctuator({)Keyword(return)Identifier(a)Punctuator(+)Identifier(d)Punctuator(;)Punctuator(})\nKeyword(var)Identifier(c)Punctuator(=)Identifier(addA)Punctuator(()Numeric(2)Punctuator())Punctuator(+)Identifier(b)Punctuator(;)\n")])]),t._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[t._v("1")]),r("br"),r("span",{staticClass:"line-number"},[t._v("2")]),r("br"),r("span",{staticClass:"line-number"},[t._v("3")]),r("br"),r("span",{staticClass:"line-number"},[t._v("4")]),r("br")])]),r("p",[t._v("而生成的对应的AST如下:")]),t._v(" "),r("p",[r("img",{attrs:{src:s(487),alt:"ast-example"}})]),t._v(" "),r("p",[t._v("图中可以看出，AST 的结构和代码的结构非常相似，其实你也可以把 AST 看成代码的结 构化的表示，编译器或者解释器后续的工作都需要依赖于 AST，而不是源代码。")]),t._v(" "),r("p",[t._v("现在你知道了什么是 AST 以及它的一些应用，那接下来我们再来看下 AST 是如何生成的。 通常，生成 AST 需要经过两个阶段。")]),t._v(" "),r("p",[r("strong",[t._v("第一阶段是分词（tokenize），又称为词法分析")]),t._v("，其作用是将一行行的源码拆解成一个个 token。所谓token，指的是语法上不可能再分的、最小的单个字符或字符串。")]),t._v(" "),r("p",[t._v("可以结合上段代码的tokens来理解什么是token, 以及token的属性.")]),t._v(" "),r("p",[r("strong",[t._v("第二阶段是解析（parse），又称为语法分析")]),t._v("，其作用是将上一步生成的 token 数据，根 据语法规则转为 AST。如果源码符合语法规则，这一步就会顺利完成。但如果源码存在语 法错误，这一步就会终止，并抛出一个“语法错误”。")]),t._v(" "),r("p",[t._v("有了 AST 后，那接下来 V8 就会生成该段代码的"),r("strong",[t._v("执行上下文")]),t._v("。")]),t._v(" "),r("h3",{attrs:{id:"生成字节码"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#生成字节码"}},[t._v("#")]),t._v(" 生成字节码")]),t._v(" "),r("p",[t._v("有了 AST 和执行上下文后，那接下来的第二步，解释器 Ignition 就登场了，它会根据 AST 生成字节码，并解释执行字节码。")]),t._v(" "),r("p",[r("strong",[t._v("字节码就是介于 AST 和机器码之间的一种代码。但是与特定类型的机器码无关，字节码需 要通过解释器将其转换为机器码后才能执行。")])]),t._v(" "),r("p",[r("img",{attrs:{src:s(488),alt:"bytecode"}})]),t._v(" "),r("p",[t._v("从图中可以看出，机器码所占用的空间远远超过了字节码，所以使用字节码可以减少系统的 内存使用。")]),t._v(" "),r("h3",{attrs:{id:"执行代码"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#执行代码"}},[t._v("#")]),t._v(" 执行代码")]),t._v(" "),r("p",[t._v("生成字节码之后，接下来就要进入执行阶段了。")]),t._v(" "),r("p",[t._v("通常，如果有一段第一次执行的字节码，解释器 Ignition 会逐条解释执行。在执行字节码的过程中，"),r("strong",[t._v("如果发现有热点代码（HotSpot），比如一段代码被重复执行多次，这种就称为热点代码")]),t._v("，那么后台的编译器 TurboFan 就会把该段热点的字节码编译为高效的机器码，然后当再次执行这段被优化的代码时，只需要执行编译后的机器码就可以了，这样就大大提升了代码的执行效率。")]),t._v(" "),r("p",[t._v("其实字节码配合解释器和编译器是最近一段时间很火的技术，比如 Java 和 Python 的虚拟机也都是基于这种技术实现的，我们把这种技术称为"),r("strong",[t._v("即时编译（JIT）")]),t._v("。具体到 V8，就是指解释器 Ignition 在解释执行字节码的同时，收集代码信息，当它发现某一部分代码变热了之后，TurboFan 编译器便闪亮登场，把热点的字节码转换为机器码，并把转换后的机器码保存起来，以备下次使用。")]),t._v(" "),r("h2",{attrs:{id:"javascript-的性能优化"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#javascript-的性能优化"}},[t._v("#")]),t._v(" JavaScript 的性能优化")]),t._v(" "),r("h3",{attrs:{id:"宏观角度"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#宏观角度"}},[t._v("#")]),t._v(" 宏观角度")]),t._v(" "),r("ol",[r("li",[r("p",[t._v("提升单次脚本的执行速度，避免 JavaScript 的长任务霸占主线程，这样可以使得页面快速响应交互；")])]),t._v(" "),r("li",[r("p",[t._v("避免大的内联脚本，因为在解析 HTML 的过程中，解析和编译也会占用主线程；")])]),t._v(" "),r("li",[r("p",[t._v("减少 JavaScript 文件的容量，因为更小的文件会提升下载速度，并且占用更低的内存。")])])]),t._v(" "),r("h3",{attrs:{id:"微观角度"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#微观角度"}},[t._v("#")]),t._v(" 微观角度")]),t._v(" "),r("ol",[r("li",[t._v("充分利用"),r("strong",[t._v("Machine Code")]),t._v(", 通过使你的代码变为热点代码, 使其编译为"),r("strong",[t._v("Machine Code")]),t._v(", 进而提高执行速度")]),t._v(" "),r("li",[t._v("依据V8中的"),r("strong",[t._v("快属性和满属性")]),t._v("规则, 使用的对象属性不易过多, 提升对象属性的访问速度")]),t._v(" "),r("li",[t._v("依据V8"),r("strong",[t._v("隐藏类")]),t._v("规则, 声明对象后不要轻易改变对象的属性, 提升V8的执行效率")]),t._v(" "),r("li",[t._v("依据V8的"),r("strong",[t._v("内联缓存")]),t._v("规则, "),r("strong",[t._v("单态的性能优于多态和超态")]),t._v(", 传递参数时, 尽量固定参数对象的形状.")])])])}),[],!1,null,null,null);a.default=n.exports}}]);